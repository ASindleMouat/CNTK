CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3530 @ 2.80GHz
    Hardware threads: 4
    Total Memory: 12580404 kB
-------------------------------------------------------------------
=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 3 C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu DeviceId=0 timestamping=true numCPUThreads=1 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Jul 12 2016 06:45:36
		Last modified date: Fri Jul  8 10:29:45 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
		Built by svcphil on LIANA-09-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
-------------------------------------------------------------------
Build info: 

		Built time: Jul 12 2016 06:45:36
		Last modified date: Fri Jul  8 10:29:45 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
		Built by svcphil on LIANA-09-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
-------------------------------------------------------------------
Build info: 

		Built time: Jul 12 2016 06:45:36
		Last modified date: Fri Jul  8 10:29:45 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
		Built by svcphil on LIANA-09-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (before change)]: all 3 nodes responded
ping [requestnodes (after change)]: 3 nodes pinging each other
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
ping [requestnodes (before change)]: all 3 nodes responded
ping [requestnodes (after change)]: 3 nodes pinging each other
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
ping [requestnodes (after change)]: all 3 nodes responded
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
mpihelper: we are cog 2 in a gearbox of 3
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
MPI Rank 0: 07/12/2016 07:44:11: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr_speechTrain.logrank0
MPI Rank 0: 07/12/2016 07:44:11: -------------------------------------------------------------------
MPI Rank 0: 07/12/2016 07:44:11: Build info: 
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:11: 		Built time: Jul 12 2016 06:45:36
MPI Rank 0: 07/12/2016 07:44:11: 		Last modified date: Fri Jul  8 10:29:45 2016
MPI Rank 0: 07/12/2016 07:44:11: 		Build type: Debug
MPI Rank 0: 07/12/2016 07:44:11: 		Build target: GPU
MPI Rank 0: 07/12/2016 07:44:11: 		With 1bit-SGD: no
MPI Rank 0: 07/12/2016 07:44:11: 		Math lib: mkl
MPI Rank 0: 07/12/2016 07:44:11: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 0: 07/12/2016 07:44:11: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 0: 07/12/2016 07:44:11: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 0: 07/12/2016 07:44:11: 		Build Branch: HEAD
MPI Rank 0: 07/12/2016 07:44:11: 		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
MPI Rank 0: 07/12/2016 07:44:11: 		Built by svcphil on LIANA-09-w
MPI Rank 0: 07/12/2016 07:44:11: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 0: 07/12/2016 07:44:11: -------------------------------------------------------------------
MPI Rank 0: 07/12/2016 07:44:11: -------------------------------------------------------------------
MPI Rank 0: 07/12/2016 07:44:11: GPU info:
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:11: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
MPI Rank 0: 07/12/2016 07:44:11: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:11: Running on cntk-muc00 at 2016/07/12 07:44:11
MPI Rank 0: 07/12/2016 07:44:11: Command line: 
MPI Rank 0: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu  DeviceId=0  timestamping=true  numCPUThreads=1  precision=double  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]  speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]  speechTrain=[SGD=[maxEpochs=4]]  speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:11: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/12/2016 07:44:11: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=1
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:11: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:11: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/12/2016 07:44:11: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=1
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:11: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:11: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=0
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=1
MPI Rank 0: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=double
MPI Rank 0: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 07/12/2016 07:44:11: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 07/12/2016 07:44:11: Commands: speechTrain
MPI Rank 0: 07/12/2016 07:44:11: Precision = "double"
MPI Rank 0: 07/12/2016 07:44:11: Using 1 CPU threads.
MPI Rank 0: 07/12/2016 07:44:11: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn
MPI Rank 0: 07/12/2016 07:44:11: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 0: 07/12/2016 07:44:11: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:11: ##############################################################################
MPI Rank 0: 07/12/2016 07:44:11: #                                                                            #
MPI Rank 0: 07/12/2016 07:44:11: # Action "train"                                                             #
MPI Rank 0: 07/12/2016 07:44:11: #                                                                            #
MPI Rank 0: 07/12/2016 07:44:11: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:11: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using GPU 0
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:13: Creating virgin network.
MPI Rank 0: Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 7 roots:
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction()
MPI Rank 0: 	InvStdOfFeatures = InvStdDev()
MPI Rank 0: 	MeanOfFeatures = Mean()
MPI Rank 0: 	PosteriorProb = Softmax()
MPI Rank 0: 	Prior = Mean()
MPI Rank 0: 	ScaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> W2 = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> W1 = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> W0 = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> B0 = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> B1 = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> B2 = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> Prior = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 17 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:14: Created model with 25 nodes on GPU 0.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:14: Training criterion node(s):
MPI Rank 0: 07/12/2016 07:44:14: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:14: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:14: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: 0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
MPI Rank 0: 000000A398F3F750: {[features Value[363 x *]] }
MPI Rank 0: 000000A39CCB5940: {[CrossEntropyWithSoftmax Gradient[1]] }
MPI Rank 0: 000000A39CCB5BB0: {[B2 Gradient[132 x 1]] }
MPI Rank 0: 000000A39CCB70D0: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
MPI Rank 0: 000000A39CCB71A0: {[W2*H1 Gradient[132 x 1 x *]] }
MPI Rank 0: 000000A3ADFC6AE0: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
MPI Rank 0: 000000A3ADFC6BB0: {[B0 Value[512 x 1]] }
MPI Rank 0: 000000A3ADFC6C80: {[EvalErrorPrediction Value[1]] }
MPI Rank 0: 000000A3ADFC6D50: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
MPI Rank 0: 000000A3ADFC6E20: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
MPI Rank 0: 000000A3ADFC6EF0: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
MPI Rank 0: 000000A3ADFC6FC0: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
MPI Rank 0: 000000A3ADFC7160: {[InvStdOfFeatures Value[363]] }
MPI Rank 0: 000000A3ADFC73D0: {[W0 Value[512 x 363]] }
MPI Rank 0: 000000A3ADFC74A0: {[B1 Value[512 x 1]] }
MPI Rank 0: 000000A3ADFC7640: {[labels Value[132 x *]] }
MPI Rank 0: 000000A3ADFC77E0: {[MVNormalizedFeatures Value[363 x *]] }
MPI Rank 0: 000000A3ADFC7980: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
MPI Rank 0: 000000A3ADFC7A50: {[MeanOfFeatures Value[363]] }
MPI Rank 0: 000000A3ADFC7B20: {[B2 Value[132 x 1]] }
MPI Rank 0: 000000A3ADFC8000: {[W1 Value[512 x 512]] }
MPI Rank 0: 000000A3ADFC8270: {[W2 Value[132 x 512]] }
MPI Rank 0: 000000A3ADFC8340: {[CrossEntropyWithSoftmax Value[1]] }
MPI Rank 0: 000000A3ADFC8410: {[Prior Value[132]] }
MPI Rank 0: 000000A3ADFC84E0: {[ScaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 000000A3ADFC85B0: {[LogOfPrior Value[132]] }
MPI Rank 0: 000000A3ADFC8750: {[W0*features Value[512 x *]] }
MPI Rank 0: 000000A3ADFC8820: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:14: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:14: 	MeanOfFeatures = Mean()
MPI Rank 0: 07/12/2016 07:44:14: 	InvStdOfFeatures = InvStdDev()
MPI Rank 0: 07/12/2016 07:44:14: 	Prior = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:44:43: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:45:00: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:45:00: Starting minibatch loop.
MPI Rank 0: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.13%]: CrossEntropyWithSoftmax = 4.63925816 * 640; EvalErrorPrediction = 0.92812500 * 640; time = 0.2420s; samplesPerSecond = 2644.3
MPI Rank 0: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.32883806 * 640; EvalErrorPrediction = 0.90312500 * 640; time = 0.2462s; samplesPerSecond = 2600.0
MPI Rank 0: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.08378633 * 640; EvalErrorPrediction = 0.87500000 * 640; time = 0.2044s; samplesPerSecond = 3131.4
MPI Rank 0: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.86437688 * 640; EvalErrorPrediction = 0.85781250 * 640; time = 0.2533s; samplesPerSecond = 2527.0
MPI Rank 0: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.63%]: CrossEntropyWithSoftmax = 3.78275244 * 640; EvalErrorPrediction = 0.84062500 * 640; time = 0.2402s; samplesPerSecond = 2664.4
MPI Rank 0: 07/12/2016 07:45:02:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.78346887 * 640; EvalErrorPrediction = 0.84062500 * 640; time = 0.2399s; samplesPerSecond = 2667.6
MPI Rank 0: 07/12/2016 07:45:02:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.57945558 * 640; EvalErrorPrediction = 0.84375000 * 640; time = 0.1973s; samplesPerSecond = 3243.9
MPI Rank 0: 07/12/2016 07:45:02:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.41928690 * 640; EvalErrorPrediction = 0.80625000 * 640; time = 0.1984s; samplesPerSecond = 3225.5
MPI Rank 0: 07/12/2016 07:45:02:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.13%]: CrossEntropyWithSoftmax = 3.35537765 * 640; EvalErrorPrediction = 0.78437500 * 640; time = 0.2049s; samplesPerSecond = 3124.2
MPI Rank 0: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.34035314 * 640; EvalErrorPrediction = 0.79687500 * 640; time = 0.1982s; samplesPerSecond = 3229.3
MPI Rank 0: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.14170387 * 640; EvalErrorPrediction = 0.73437500 * 640; time = 0.2433s; samplesPerSecond = 2630.4
MPI Rank 0: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.13777172 * 640; EvalErrorPrediction = 0.76562500 * 640; time = 0.2009s; samplesPerSecond = 3186.1
MPI Rank 0: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.63%]: CrossEntropyWithSoftmax = 3.23064165 * 640; EvalErrorPrediction = 0.80000000 * 640; time = 0.1999s; samplesPerSecond = 3201.0
MPI Rank 0: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.05606676 * 640; EvalErrorPrediction = 0.75781250 * 640; time = 0.2050s; samplesPerSecond = 3121.4
MPI Rank 0: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.02136529 * 640; EvalErrorPrediction = 0.71718750 * 640; time = 0.1985s; samplesPerSecond = 3223.9
MPI Rank 0: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 2.95667243 * 640; EvalErrorPrediction = 0.69687500 * 640; time = 0.2343s; samplesPerSecond = 2732.0
MPI Rank 0: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.13%]: CrossEntropyWithSoftmax = 2.93193504 * 640; EvalErrorPrediction = 0.72812500 * 640; time = 0.1976s; samplesPerSecond = 3238.7
MPI Rank 0: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.72416562 * 640; EvalErrorPrediction = 0.69531250 * 640; time = 0.2396s; samplesPerSecond = 2670.7
MPI Rank 0: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.83200380 * 640; EvalErrorPrediction = 0.70156250 * 640; time = 0.2372s; samplesPerSecond = 2698.0
MPI Rank 0: 07/12/2016 07:45:05:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.70679406 * 640; EvalErrorPrediction = 0.65625000 * 640; time = 0.2389s; samplesPerSecond = 2679.5
MPI Rank 0: 07/12/2016 07:45:05:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.63%]: CrossEntropyWithSoftmax = 2.77854003 * 640; EvalErrorPrediction = 0.71562500 * 640; time = 0.2143s; samplesPerSecond = 2986.1
MPI Rank 0: 07/12/2016 07:45:05:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.66396376 * 640; EvalErrorPrediction = 0.70000000 * 640; time = 0.2047s; samplesPerSecond = 3127.2
MPI Rank 0: 07/12/2016 07:45:05:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.57950992 * 640; EvalErrorPrediction = 0.65468750 * 640; time = 0.2000s; samplesPerSecond = 3200.8
MPI Rank 0: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.36937895 * 640; EvalErrorPrediction = 0.62812500 * 640; time = 0.2123s; samplesPerSecond = 3014.5
MPI Rank 0: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.13%]: CrossEntropyWithSoftmax = 2.40040988 * 640; EvalErrorPrediction = 0.62656250 * 640; time = 0.2610s; samplesPerSecond = 2451.8
MPI Rank 0: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.40305075 * 640; EvalErrorPrediction = 0.62343750 * 640; time = 0.2008s; samplesPerSecond = 3187.7
MPI Rank 0: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.55326989 * 640; EvalErrorPrediction = 0.67187500 * 640; time = 0.2051s; samplesPerSecond = 3121.2
MPI Rank 0: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.34851895 * 640; EvalErrorPrediction = 0.62812500 * 640; time = 0.2381s; samplesPerSecond = 2688.1
MPI Rank 0: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.63%]: CrossEntropyWithSoftmax = 2.22384722 * 640; EvalErrorPrediction = 0.62500000 * 640; time = 0.2391s; samplesPerSecond = 2676.3
MPI Rank 0: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.26093641 * 640; EvalErrorPrediction = 0.60000000 * 640; time = 0.2077s; samplesPerSecond = 3081.5
MPI Rank 0: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.29654256 * 640; EvalErrorPrediction = 0.60937500 * 640; time = 0.1974s; samplesPerSecond = 3242.8
MPI Rank 0: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.27450077 * 640; EvalErrorPrediction = 0.59843750 * 640; time = 0.1891s; samplesPerSecond = 3385.3
MPI Rank 0: 07/12/2016 07:45:07: Finished Epoch[ 1 of 4]: [Training] CrossEntropyWithSoftmax = 3.03339198 * 20480; EvalErrorPrediction = 0.73159180 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=7.01197s
MPI Rank 0: 07/12/2016 07:45:09: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:45:09: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:45:09: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Actual gradient aggregation time: 0.041152
MPI Rank 0: Async gradient aggregation wait time: 0.033766
MPI Rank 0: Actual gradient aggregation time: 0.037021
MPI Rank 0: 07/12/2016 07:45:10:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.16269672 * 2304; EvalErrorPrediction = 0.58810764 * 2304; time = 0.4645s; samplesPerSecond = 4959.7
MPI Rank 0: Async gradient aggregation wait time: 0.216464
MPI Rank 0: Actual gradient aggregation time: 0.129368
MPI Rank 0: Async gradient aggregation wait time: 0.00495
MPI Rank 0: Actual gradient aggregation time: 0.033463
MPI Rank 0: 07/12/2016 07:45:11:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.10873971 * 2560; EvalErrorPrediction = 0.57890625 * 2560; time = 0.7859s; samplesPerSecond = 3257.4
MPI Rank 0: Async gradient aggregation wait time: 0.009068
MPI Rank 0: Actual gradient aggregation time: 0.050009
MPI Rank 0: Async gradient aggregation wait time: 2e-006
MPI Rank 0: Actual gradient aggregation time: 0.018755
MPI Rank 0: 07/12/2016 07:45:12:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.14483241 * 2560; EvalErrorPrediction = 0.57109375 * 2560; time = 0.8443s; samplesPerSecond = 3032.3
MPI Rank 0: Async gradient aggregation wait time: 0.006634
MPI Rank 0: Actual gradient aggregation time: 0.111745
MPI Rank 0: Async gradient aggregation wait time: 0.073882
MPI Rank 0: Actual gradient aggregation time: 0.019511
MPI Rank 0: 07/12/2016 07:45:12:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 2.19328159 * 2560; EvalErrorPrediction = 0.58593750 * 2560; time = 0.6691s; samplesPerSecond = 3826.3
MPI Rank 0: Async gradient aggregation wait time: 0.004606
MPI Rank 0: Actual gradient aggregation time: 0.039316
MPI Rank 0: Async gradient aggregation wait time: 0.050237
MPI Rank 0: Actual gradient aggregation time: 0.038716
MPI Rank 0: 07/12/2016 07:45:13:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 2.18948678 * 2560; EvalErrorPrediction = 0.58203125 * 2560; time = 0.5555s; samplesPerSecond = 4608.6
MPI Rank 0: Async gradient aggregation wait time: 2e-006
MPI Rank 0: Actual gradient aggregation time: 0.010051
MPI Rank 0: Async gradient aggregation wait time: 0.00394
MPI Rank 0: Actual gradient aggregation time: 0.031298
MPI Rank 0: 07/12/2016 07:45:13:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 2.12942428 * 2560; EvalErrorPrediction = 0.57656250 * 2560; time = 0.5799s; samplesPerSecond = 4414.8
MPI Rank 0: Async gradient aggregation wait time: 0.003914
MPI Rank 0: Actual gradient aggregation time: 0.04516
MPI Rank 0: Async gradient aggregation wait time: 2e-006
MPI Rank 0: Actual gradient aggregation time: 0.004442
MPI Rank 0: 07/12/2016 07:45:14:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 2.24928197 * 2560; EvalErrorPrediction = 0.63007813 * 2560; time = 0.8072s; samplesPerSecond = 3171.6
MPI Rank 0: Async gradient aggregation wait time: 0.086645
MPI Rank 0: Actual gradient aggregation time: 0.133009
MPI Rank 0: Async gradient aggregation wait time: 0.014837
MPI Rank 0: Actual gradient aggregation time: 0.038372
MPI Rank 0: 07/12/2016 07:45:15:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 2.15627372 * 2560; EvalErrorPrediction = 0.57187500 * 2560; time = 0.8569s; samplesPerSecond = 2987.5
MPI Rank 0: Async gradient aggregation wait time: 0.008334
MPI Rank 0: Actual gradient aggregation time: 0.013552
MPI Rank 0: 07/12/2016 07:45:15: Finished Epoch[ 2 of 4]: [Training] CrossEntropyWithSoftmax = 2.16628446 * 20480; EvalErrorPrediction = 0.58520508 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=5.60464s
MPI Rank 0: 07/12/2016 07:45:15: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn.2'
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:45:15: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:45:15: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 0.003352
MPI Rank 0: Actual gradient aggregation time: 0.235177
MPI Rank 0: Async gradient aggregation wait time: 0.018623
MPI Rank 0: Actual gradient aggregation time: 0.089217
MPI Rank 0: 07/12/2016 07:45:16:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.19054228 * 9216; EvalErrorPrediction = 0.57042101 * 9216; time = 1.2255s; samplesPerSecond = 7520.3
MPI Rank 0: Async gradient aggregation wait time: 0.01017
MPI Rank 0: Actual gradient aggregation time: 0.175862
MPI Rank 0: Async gradient aggregation wait time: 0.060805
MPI Rank 0: Actual gradient aggregation time: 0.153259
MPI Rank 0: 07/12/2016 07:45:18:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.15940173 * 10240; EvalErrorPrediction = 0.56484375 * 10240; time = 1.1857s; samplesPerSecond = 8636.5
MPI Rank 0: 07/12/2016 07:45:18: Finished Epoch[ 3 of 4]: [Training] CrossEntropyWithSoftmax = 2.16937752 * 20480; EvalErrorPrediction = 0.56713867 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-005; epochTime=2.4837s
MPI Rank 0: 07/12/2016 07:45:18: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:45:18: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:45:18: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 4e-006
MPI Rank 0: Actual gradient aggregation time: 0.004463
MPI Rank 0: Async gradient aggregation wait time: 5e-006
MPI Rank 0: Actual gradient aggregation time: 0.201069
MPI Rank 0: 07/12/2016 07:45:19:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.09278716 * 9216; EvalErrorPrediction = 0.56532118 * 9216; time = 1.4121s; samplesPerSecond = 6526.2
MPI Rank 0: Async gradient aggregation wait time: 0.050149
MPI Rank 0: Actual gradient aggregation time: 0.102282
MPI Rank 0: Async gradient aggregation wait time: 0.110466
MPI Rank 0: Actual gradient aggregation time: 0.167754
MPI Rank 0: 07/12/2016 07:45:21:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.04723465 * 10240; EvalErrorPrediction = 0.55087891 * 10240; time = 1.4357s; samplesPerSecond = 7132.6
MPI Rank 0: Async gradient aggregation wait time: 0.008217
MPI Rank 0: 07/12/2016 07:45:21: Finished Epoch[ 4 of 4]: [Training] CrossEntropyWithSoftmax = 2.06384290 * 20480; EvalErrorPrediction = 0.55722656 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 9.7656251e-005; epochTime=2.98379s
MPI Rank 0: 07/12/2016 07:45:21: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn'
MPI Rank 0: 07/12/2016 07:45:21: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:45:21: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:45:21: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 07/12/2016 07:44:11: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr_speechTrain.logrank1
MPI Rank 1: 07/12/2016 07:44:11: -------------------------------------------------------------------
MPI Rank 1: 07/12/2016 07:44:11: Build info: 
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:11: 		Built time: Jul 12 2016 06:45:36
MPI Rank 1: 07/12/2016 07:44:11: 		Last modified date: Fri Jul  8 10:29:45 2016
MPI Rank 1: 07/12/2016 07:44:11: 		Build type: Debug
MPI Rank 1: 07/12/2016 07:44:11: 		Build target: GPU
MPI Rank 1: 07/12/2016 07:44:11: 		With 1bit-SGD: no
MPI Rank 1: 07/12/2016 07:44:11: 		Math lib: mkl
MPI Rank 1: 07/12/2016 07:44:11: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 1: 07/12/2016 07:44:11: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 1: 07/12/2016 07:44:11: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 1: 07/12/2016 07:44:11: 		Build Branch: HEAD
MPI Rank 1: 07/12/2016 07:44:11: 		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
MPI Rank 1: 07/12/2016 07:44:11: 		Built by svcphil on LIANA-09-w
MPI Rank 1: 07/12/2016 07:44:11: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 1: 07/12/2016 07:44:11: -------------------------------------------------------------------
MPI Rank 1: 07/12/2016 07:44:12: -------------------------------------------------------------------
MPI Rank 1: 07/12/2016 07:44:12: GPU info:
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:12: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
MPI Rank 1: 07/12/2016 07:44:12: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:12: Running on cntk-muc00 at 2016/07/12 07:44:12
MPI Rank 1: 07/12/2016 07:44:12: Command line: 
MPI Rank 1: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu  DeviceId=0  timestamping=true  numCPUThreads=1  precision=double  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]  speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]  speechTrain=[SGD=[maxEpochs=4]]  speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:12: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/12/2016 07:44:12: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=1
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:12: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:12: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/12/2016 07:44:12: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=1
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:12: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:12: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=0
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=1
MPI Rank 1: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=double
MPI Rank 1: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 07/12/2016 07:44:12: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 07/12/2016 07:44:12: Commands: speechTrain
MPI Rank 1: 07/12/2016 07:44:12: Precision = "double"
MPI Rank 1: 07/12/2016 07:44:12: Using 1 CPU threads.
MPI Rank 1: 07/12/2016 07:44:12: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn
MPI Rank 1: 07/12/2016 07:44:12: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 1: 07/12/2016 07:44:12: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:12: ##############################################################################
MPI Rank 1: 07/12/2016 07:44:12: #                                                                            #
MPI Rank 1: 07/12/2016 07:44:12: # Action "train"                                                             #
MPI Rank 1: 07/12/2016 07:44:12: #                                                                            #
MPI Rank 1: 07/12/2016 07:44:12: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:12: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using GPU 0
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:14: Creating virgin network.
MPI Rank 1: Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 7 roots:
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction()
MPI Rank 1: 	InvStdOfFeatures = InvStdDev()
MPI Rank 1: 	MeanOfFeatures = Mean()
MPI Rank 1: 	PosteriorProb = Softmax()
MPI Rank 1: 	Prior = Mean()
MPI Rank 1: 	ScaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> W2 = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> W1 = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> W0 = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> B0 = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> B1 = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> B2 = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> Prior = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 17 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:14: Created model with 25 nodes on GPU 0.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:14: Training criterion node(s):
MPI Rank 1: 07/12/2016 07:44:14: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:14: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:14: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: 0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
MPI Rank 1: 000000B58B52F9C0: {[features Value[363 x *]] }
MPI Rank 1: 000000B59B27A1D0: {[W2*H1 Gradient[132 x 1 x *]] }
MPI Rank 1: 000000B59B27A440: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
MPI Rank 1: 000000B59B27AAC0: {[B2 Gradient[132 x 1]] }
MPI Rank 1: 000000B59B27B7C0: {[CrossEntropyWithSoftmax Gradient[1]] }
MPI Rank 1: 000000B59FAE31F0: {[LogOfPrior Value[132]] }
MPI Rank 1: 000000B59FAE3530: {[MeanOfFeatures Value[363]] }
MPI Rank 1: 000000B59FAE3C80: {[W1 Value[512 x 512]] }
MPI Rank 1: 000000B59FAE3D50: {[W2 Value[132 x 512]] }
MPI Rank 1: 000000B59FAE3E20: {[ScaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 000000B59FAE3EF0: {[CrossEntropyWithSoftmax Value[1]] }
MPI Rank 1: 000000B59FAE4090: {[labels Value[132 x *]] }
MPI Rank 1: 000000B59FAE4160: {[B2 Value[132 x 1]] }
MPI Rank 1: 000000B59FAE4230: {[Prior Value[132]] }
MPI Rank 1: 000000B59FAE4300: {[W0*features Value[512 x *]] }
MPI Rank 1: 000000B59FAE43D0: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
MPI Rank 1: 000000B59FAE44A0: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
MPI Rank 1: 000000B59FAE4640: {[B1 Value[512 x 1]] }
MPI Rank 1: 000000B59FAE4710: {[MVNormalizedFeatures Value[363 x *]] }
MPI Rank 1: 000000B59FAE47E0: {[EvalErrorPrediction Value[1]] }
MPI Rank 1: 000000B59FAE4980: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
MPI Rank 1: 000000B59FAE4A50: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
MPI Rank 1: 000000B59FAE4B20: {[B0 Value[512 x 1]] }
MPI Rank 1: 000000B59FAE4BF0: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
MPI Rank 1: 000000B59FAE4CC0: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
MPI Rank 1: 000000B59FAE4D90: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
MPI Rank 1: 000000B59FAE4F30: {[InvStdOfFeatures Value[363]] }
MPI Rank 1: 000000B59FAE5000: {[W0 Value[512 x 363]] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:14: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:14: 	MeanOfFeatures = Mean()
MPI Rank 1: 07/12/2016 07:44:14: 	InvStdOfFeatures = InvStdDev()
MPI Rank 1: 07/12/2016 07:44:14: 	Prior = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:44:44: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:45:00: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:45:00: Starting minibatch loop.
MPI Rank 1: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.13%]: CrossEntropyWithSoftmax = 4.63925816 * 640; EvalErrorPrediction = 0.92812500 * 640; time = 0.2999s; samplesPerSecond = 2134.1
MPI Rank 1: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.32883806 * 640; EvalErrorPrediction = 0.90312500 * 640; time = 0.2719s; samplesPerSecond = 2354.0
MPI Rank 1: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.08378633 * 640; EvalErrorPrediction = 0.87500000 * 640; time = 0.3099s; samplesPerSecond = 2065.3
MPI Rank 1: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.86437688 * 640; EvalErrorPrediction = 0.85781250 * 640; time = 0.2403s; samplesPerSecond = 2663.1
MPI Rank 1: 07/12/2016 07:45:02:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.63%]: CrossEntropyWithSoftmax = 3.78275244 * 640; EvalErrorPrediction = 0.84062500 * 640; time = 0.2395s; samplesPerSecond = 2672.0
MPI Rank 1: 07/12/2016 07:45:02:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.78346887 * 640; EvalErrorPrediction = 0.84062500 * 640; time = 0.3275s; samplesPerSecond = 1954.0
MPI Rank 1: 07/12/2016 07:45:02:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.57945558 * 640; EvalErrorPrediction = 0.84375000 * 640; time = 0.4027s; samplesPerSecond = 1589.2
MPI Rank 1: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.41928690 * 640; EvalErrorPrediction = 0.80625000 * 640; time = 0.3366s; samplesPerSecond = 1901.4
MPI Rank 1: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.13%]: CrossEntropyWithSoftmax = 3.35537765 * 640; EvalErrorPrediction = 0.78437500 * 640; time = 0.3282s; samplesPerSecond = 1950.2
MPI Rank 1: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.34035314 * 640; EvalErrorPrediction = 0.79687500 * 640; time = 0.4034s; samplesPerSecond = 1586.6
MPI Rank 1: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.14170387 * 640; EvalErrorPrediction = 0.73437500 * 640; time = 0.3363s; samplesPerSecond = 1903.0
MPI Rank 1: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.13777172 * 640; EvalErrorPrediction = 0.76562500 * 640; time = 0.3520s; samplesPerSecond = 1818.3
MPI Rank 1: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.63%]: CrossEntropyWithSoftmax = 3.23064165 * 640; EvalErrorPrediction = 0.80000000 * 640; time = 0.2494s; samplesPerSecond = 2565.9
MPI Rank 1: 07/12/2016 07:45:05:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.05606676 * 640; EvalErrorPrediction = 0.75781250 * 640; time = 0.2360s; samplesPerSecond = 2711.6
MPI Rank 1: 07/12/2016 07:45:05:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.02136529 * 640; EvalErrorPrediction = 0.71718750 * 640; time = 0.2484s; samplesPerSecond = 2576.7
MPI Rank 1: 07/12/2016 07:45:05:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 2.95667243 * 640; EvalErrorPrediction = 0.69687500 * 640; time = 0.4014s; samplesPerSecond = 1594.3
MPI Rank 1: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.13%]: CrossEntropyWithSoftmax = 2.93193504 * 640; EvalErrorPrediction = 0.72812500 * 640; time = 0.3573s; samplesPerSecond = 1791.3
MPI Rank 1: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.72416562 * 640; EvalErrorPrediction = 0.69531250 * 640; time = 0.2618s; samplesPerSecond = 2444.2
MPI Rank 1: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.83200380 * 640; EvalErrorPrediction = 0.70156250 * 640; time = 0.4017s; samplesPerSecond = 1593.3
MPI Rank 1: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.70679406 * 640; EvalErrorPrediction = 0.65625000 * 640; time = 0.2599s; samplesPerSecond = 2462.4
MPI Rank 1: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.63%]: CrossEntropyWithSoftmax = 2.77854003 * 640; EvalErrorPrediction = 0.71562500 * 640; time = 0.2390s; samplesPerSecond = 2677.3
MPI Rank 1: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.66396376 * 640; EvalErrorPrediction = 0.70000000 * 640; time = 0.3872s; samplesPerSecond = 1652.9
MPI Rank 1: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.57950992 * 640; EvalErrorPrediction = 0.65468750 * 640; time = 0.2229s; samplesPerSecond = 2871.1
MPI Rank 1: 07/12/2016 07:45:08:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.36937895 * 640; EvalErrorPrediction = 0.62812500 * 640; time = 0.1959s; samplesPerSecond = 3267.0
MPI Rank 1: 07/12/2016 07:45:08:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.13%]: CrossEntropyWithSoftmax = 2.40040988 * 640; EvalErrorPrediction = 0.62656250 * 640; time = 0.2021s; samplesPerSecond = 3166.9
MPI Rank 1: 07/12/2016 07:45:08:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.40305075 * 640; EvalErrorPrediction = 0.62343750 * 640; time = 0.2021s; samplesPerSecond = 3167.4
MPI Rank 1: 07/12/2016 07:45:08:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.55326989 * 640; EvalErrorPrediction = 0.67187500 * 640; time = 0.2023s; samplesPerSecond = 3163.6
MPI Rank 1: 07/12/2016 07:45:08:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.34851895 * 640; EvalErrorPrediction = 0.62812500 * 640; time = 0.2021s; samplesPerSecond = 3166.5
MPI Rank 1: 07/12/2016 07:45:09:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.63%]: CrossEntropyWithSoftmax = 2.22384722 * 640; EvalErrorPrediction = 0.62500000 * 640; time = 0.2032s; samplesPerSecond = 3149.1
MPI Rank 1: 07/12/2016 07:45:09:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.26093641 * 640; EvalErrorPrediction = 0.60000000 * 640; time = 0.2018s; samplesPerSecond = 3171.6
MPI Rank 1: 07/12/2016 07:45:09:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.29654256 * 640; EvalErrorPrediction = 0.60937500 * 640; time = 0.2109s; samplesPerSecond = 3034.6
MPI Rank 1: 07/12/2016 07:45:09:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.27450077 * 640; EvalErrorPrediction = 0.59843750 * 640; time = 0.1846s; samplesPerSecond = 3467.1
MPI Rank 1: 07/12/2016 07:45:09: Finished Epoch[ 1 of 4]: [Training] CrossEntropyWithSoftmax = 3.03339198 * 20480; EvalErrorPrediction = 0.73159180 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=8.94099s
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:45:09: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:45:09: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Actual gradient aggregation time: 0.049157
MPI Rank 1: Async gradient aggregation wait time: 2e-006
MPI Rank 1: Actual gradient aggregation time: 0.021339
MPI Rank 1: 07/12/2016 07:45:10:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.16269672 * 2304; EvalErrorPrediction = 0.58810764 * 2304; time = 0.4894s; samplesPerSecond = 4707.8
MPI Rank 1: Async gradient aggregation wait time: 0.093332
MPI Rank 1: Actual gradient aggregation time: 0.127803
MPI Rank 1: Async gradient aggregation wait time: 2e-006
MPI Rank 1: Actual gradient aggregation time: 0.009593
MPI Rank 1: 07/12/2016 07:45:11:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.10873971 * 2560; EvalErrorPrediction = 0.57890625 * 2560; time = 0.8165s; samplesPerSecond = 3135.3
MPI Rank 1: Async gradient aggregation wait time: 2e-006
MPI Rank 1: Actual gradient aggregation time: 0.020274
MPI Rank 1: Async gradient aggregation wait time: 2e-006
MPI Rank 1: Actual gradient aggregation time: 0.023025
MPI Rank 1: 07/12/2016 07:45:11:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.14483241 * 2560; EvalErrorPrediction = 0.57109375 * 2560; time = 0.7051s; samplesPerSecond = 3630.8
MPI Rank 1: Async gradient aggregation wait time: 0.097756
MPI Rank 1: Actual gradient aggregation time: 0.111583
MPI Rank 1: Async gradient aggregation wait time: 0.040995
MPI Rank 1: Actual gradient aggregation time: 0.037956
MPI Rank 1: 07/12/2016 07:45:12:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 2.19328159 * 2560; EvalErrorPrediction = 0.58593750 * 2560; time = 0.7784s; samplesPerSecond = 3288.9
MPI Rank 1: Async gradient aggregation wait time: 2e-006
MPI Rank 1: Actual gradient aggregation time: 0.02123
MPI Rank 1: Async gradient aggregation wait time: 1e-006
MPI Rank 1: Actual gradient aggregation time: 0.021647
MPI Rank 1: 07/12/2016 07:45:13:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 2.18948678 * 2560; EvalErrorPrediction = 0.58203125 * 2560; time = 0.5311s; samplesPerSecond = 4820.6
MPI Rank 1: Async gradient aggregation wait time: 3e-006
MPI Rank 1: Actual gradient aggregation time: 0.014344
MPI Rank 1: Async gradient aggregation wait time: 0.021975
MPI Rank 1: Actual gradient aggregation time: 0.025238
MPI Rank 1: 07/12/2016 07:45:13:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 2.12942428 * 2560; EvalErrorPrediction = 0.57656250 * 2560; time = 0.6025s; samplesPerSecond = 4249.2
MPI Rank 1: Async gradient aggregation wait time: 1e-006
MPI Rank 1: Actual gradient aggregation time: 0.026056
MPI Rank 1: Async gradient aggregation wait time: 1e-006
MPI Rank 1: Actual gradient aggregation time: 0.323177
MPI Rank 1: 07/12/2016 07:45:14:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 2.24928197 * 2560; EvalErrorPrediction = 0.63007813 * 2560; time = 0.7880s; samplesPerSecond = 3248.7
MPI Rank 1: Async gradient aggregation wait time: 0.086728
MPI Rank 1: Actual gradient aggregation time: 0.133174
MPI Rank 1: Async gradient aggregation wait time: 2e-006
MPI Rank 1: Actual gradient aggregation time: 0.007193
MPI Rank 1: 07/12/2016 07:45:15:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 2.15627372 * 2560; EvalErrorPrediction = 0.57187500 * 2560; time = 0.7608s; samplesPerSecond = 3365.1
MPI Rank 1: Async gradient aggregation wait time: 0.101036
MPI Rank 1: Actual gradient aggregation time: 0.014386
MPI Rank 1: 07/12/2016 07:45:15: Finished Epoch[ 2 of 4]: [Training] CrossEntropyWithSoftmax = 2.16628446 * 20480; EvalErrorPrediction = 0.58520508 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=5.6095s
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:45:15: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:45:15: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 0.0291
MPI Rank 1: Actual gradient aggregation time: 0.238215
MPI Rank 1: Async gradient aggregation wait time: 6e-006
MPI Rank 1: Actual gradient aggregation time: 0.058535
MPI Rank 1: 07/12/2016 07:45:17:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.19054228 * 9216; EvalErrorPrediction = 0.57042101 * 9216; time = 1.3190s; samplesPerSecond = 6986.9
MPI Rank 1: Async gradient aggregation wait time: 2e-006
MPI Rank 1: Actual gradient aggregation time: 0.015988
MPI Rank 1: Async gradient aggregation wait time: 2e-006
MPI Rank 1: Actual gradient aggregation time: 0.092964
MPI Rank 1: 07/12/2016 07:45:18:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.15940173 * 10240; EvalErrorPrediction = 0.56484375 * 10240; time = 1.1074s; samplesPerSecond = 9246.6
MPI Rank 1: 07/12/2016 07:45:18: Finished Epoch[ 3 of 4]: [Training] CrossEntropyWithSoftmax = 2.16937752 * 20480; EvalErrorPrediction = 0.56713867 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-005; epochTime=2.48376s
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:45:18: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:45:18: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 0.004868
MPI Rank 1: Actual gradient aggregation time: 0.068221
MPI Rank 1: Async gradient aggregation wait time: 4e-006
MPI Rank 1: Actual gradient aggregation time: 0.068209
MPI Rank 1: 07/12/2016 07:45:19:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.09278716 * 9216; EvalErrorPrediction = 0.56532118 * 9216; time = 1.4409s; samplesPerSecond = 6396.0
MPI Rank 1: Async gradient aggregation wait time: 0.177853
MPI Rank 1: Actual gradient aggregation time: 0.097173
MPI Rank 1: Async gradient aggregation wait time: 0.110084
MPI Rank 1: Actual gradient aggregation time: 0.167621
MPI Rank 1: 07/12/2016 07:45:21:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.04723465 * 10240; EvalErrorPrediction = 0.55087891 * 10240; time = 1.4709s; samplesPerSecond = 6961.9
MPI Rank 1: Async gradient aggregation wait time: 0.006089
MPI Rank 1: 07/12/2016 07:45:21: Finished Epoch[ 4 of 4]: [Training] CrossEntropyWithSoftmax = 2.06384290 * 20480; EvalErrorPrediction = 0.55722656 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 9.7656251e-005; epochTime=2.98405s
MPI Rank 1: 07/12/2016 07:45:21: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:45:21: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:45:21: __COMPLETED__
MPI Rank 1: ~MPIWrapper
MPI Rank 2: 07/12/2016 07:44:12: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr_speechTrain.logrank2
MPI Rank 2: 07/12/2016 07:44:12: -------------------------------------------------------------------
MPI Rank 2: 07/12/2016 07:44:12: Build info: 
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:12: 		Built time: Jul 12 2016 06:45:36
MPI Rank 2: 07/12/2016 07:44:12: 		Last modified date: Fri Jul  8 10:29:45 2016
MPI Rank 2: 07/12/2016 07:44:12: 		Build type: Debug
MPI Rank 2: 07/12/2016 07:44:12: 		Build target: GPU
MPI Rank 2: 07/12/2016 07:44:12: 		With 1bit-SGD: no
MPI Rank 2: 07/12/2016 07:44:12: 		Math lib: mkl
MPI Rank 2: 07/12/2016 07:44:12: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 2: 07/12/2016 07:44:12: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 2: 07/12/2016 07:44:12: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 2: 07/12/2016 07:44:12: 		Build Branch: HEAD
MPI Rank 2: 07/12/2016 07:44:12: 		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
MPI Rank 2: 07/12/2016 07:44:12: 		Built by svcphil on LIANA-09-w
MPI Rank 2: 07/12/2016 07:44:12: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 2: 07/12/2016 07:44:12: -------------------------------------------------------------------
MPI Rank 2: 07/12/2016 07:44:12: -------------------------------------------------------------------
MPI Rank 2: 07/12/2016 07:44:12: GPU info:
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:12: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
MPI Rank 2: 07/12/2016 07:44:12: -------------------------------------------------------------------
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:12: Running on cntk-muc00 at 2016/07/12 07:44:12
MPI Rank 2: 07/12/2016 07:44:12: Command line: 
MPI Rank 2: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu  DeviceId=0  timestamping=true  numCPUThreads=1  precision=double  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]  speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]  speechTrain=[SGD=[maxEpochs=4]]  speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:12: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: 07/12/2016 07:44:12: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = $DeviceId$
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 2: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 2: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN
MPI Rank 2: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: DeviceId=0
MPI Rank 2: timestamping=true
MPI Rank 2: numCPUThreads=1
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:12: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:12: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: 07/12/2016 07:44:12: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = 0
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = 0
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 2: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 2: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN
MPI Rank 2: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: DeviceId=0
MPI Rank 2: timestamping=true
MPI Rank 2: numCPUThreads=1
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:12: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:12: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.cntk:command=speechTrain
MPI Rank 2: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN
MPI Rank 2: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 2: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 2: configparameters: cntk.cntk:deviceId=0
MPI Rank 2: configparameters: cntk.cntk:numCPUThreads=1
MPI Rank 2: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 2: configparameters: cntk.cntk:precision=double
MPI Rank 2: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: configparameters: cntk.cntk:speechTrain=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = 0
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 2: configparameters: cntk.cntk:timestamping=true
MPI Rank 2: 07/12/2016 07:44:12: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 07/12/2016 07:44:12: Commands: speechTrain
MPI Rank 2: 07/12/2016 07:44:12: Precision = "double"
MPI Rank 2: 07/12/2016 07:44:12: Using 1 CPU threads.
MPI Rank 2: 07/12/2016 07:44:12: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712072724.748460\Speech\DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn
MPI Rank 2: 07/12/2016 07:44:12: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 2: 07/12/2016 07:44:12: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:12: ##############################################################################
MPI Rank 2: 07/12/2016 07:44:12: #                                                                            #
MPI Rank 2: 07/12/2016 07:44:12: # Action "train"                                                             #
MPI Rank 2: 07/12/2016 07:44:12: #                                                                            #
MPI Rank 2: 07/12/2016 07:44:12: ##############################################################################
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:12: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using GPU 0
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:14: Creating virgin network.
MPI Rank 2: Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 2: 
MPI Rank 2: Post-processing network...
MPI Rank 2: 
MPI Rank 2: 7 roots:
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction()
MPI Rank 2: 	InvStdOfFeatures = InvStdDev()
MPI Rank 2: 	MeanOfFeatures = Mean()
MPI Rank 2: 	PosteriorProb = Softmax()
MPI Rank 2: 	Prior = Mean()
MPI Rank 2: 	ScaledLogLikelihood = Minus()
MPI Rank 2: 
MPI Rank 2: Validating network. 25 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 2: Validating --> W2 = LearnableParameter() :  -> [132 x 512]
MPI Rank 2: Validating --> W1 = LearnableParameter() :  -> [512 x 512]
MPI Rank 2: Validating --> W0 = LearnableParameter() :  -> [512 x 363]
MPI Rank 2: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 2: Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 2: Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 2: Validating --> B0 = LearnableParameter() :  -> [512 x 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 2: Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 2: Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 2: Validating --> B1 = LearnableParameter() :  -> [512 x 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 2: Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 2: Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 2: Validating --> B2 = LearnableParameter() :  -> [132 x 1]
MPI Rank 2: Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 2: Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
MPI Rank 2: Validating --> Prior = Mean (labels) : [132 x *] -> [132]
MPI Rank 2: Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 2: 
MPI Rank 2: Validating network. 17 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating network, final pass.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: Post-processing network complete.
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:15: Created model with 25 nodes on GPU 0.
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:15: Training criterion node(s):
MPI Rank 2: 07/12/2016 07:44:15: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:15: Evaluation criterion node(s):
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:15: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward and/or backward propagation.
MPI Rank 2: 
MPI Rank 2: Memory Sharing Structure:
MPI Rank 2: 
MPI Rank 2: 0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
MPI Rank 2: 000000C798D2FA90: {[features Value[363 x *]] }
MPI Rank 2: 000000C7A029DBE0: {[LogOfPrior Value[132]] }
MPI Rank 2: 000000C7A029DCB0: {[W1 Value[512 x 512]] }
MPI Rank 2: 000000C7A029DFF0: {[B0 Value[512 x 1]] }
MPI Rank 2: 000000C7A029E0C0: {[B1 Value[512 x 1]] }
MPI Rank 2: 000000C7A029E740: {[labels Value[132 x *]] }
MPI Rank 2: 000000C7A029E810: {[W0 Value[512 x 363]] }
MPI Rank 2: 000000C7A029E9B0: {[CrossEntropyWithSoftmax Value[1]] }
MPI Rank 2: 000000C7A029EB50: {[MVNormalizedFeatures Value[363 x *]] }
MPI Rank 2: 000000C7A029EC20: {[ScaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 2: 000000C7A029ECF0: {[W2 Value[132 x 512]] }
MPI Rank 2: 000000C7A029EE90: {[W0*features Value[512 x *]] }
MPI Rank 2: 000000C7A029EF60: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
MPI Rank 2: 000000C7A029F1D0: {[InvStdOfFeatures Value[363]] }
MPI Rank 2: 000000C7A029F2A0: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
MPI Rank 2: 000000C7A029F370: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
MPI Rank 2: 000000C7A029F440: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
MPI Rank 2: 000000C7A029F510: {[Prior Value[132]] }
MPI Rank 2: 000000C7A029F5E0: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
MPI Rank 2: 000000C7A029F6B0: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
MPI Rank 2: 000000C7A029F780: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
MPI Rank 2: 000000C7A029F850: {[B2 Value[132 x 1]] }
MPI Rank 2: 000000C7A029F920: {[MeanOfFeatures Value[363]] }
MPI Rank 2: 000000C7A029FAC0: {[EvalErrorPrediction Value[1]] }
MPI Rank 2: 000000C7A0669FD0: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
MPI Rank 2: 000000C7A066A3E0: {[B2 Gradient[132 x 1]] }
MPI Rank 2: 000000C7A066A650: {[CrossEntropyWithSoftmax Gradient[1]] }
MPI Rank 2: 000000C7A066A720: {[W2*H1 Gradient[132 x 1 x *]] }
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:15: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:44:15: 	MeanOfFeatures = Mean()
MPI Rank 2: 07/12/2016 07:44:15: 	InvStdOfFeatures = InvStdDev()
MPI Rank 2: 07/12/2016 07:44:15: 	Prior = Mean()
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:00: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:00: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:00: Starting minibatch loop.
MPI Rank 2: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.13%]: CrossEntropyWithSoftmax = 4.63925816 * 640; EvalErrorPrediction = 0.92812500 * 640; time = 0.2999s; samplesPerSecond = 2134.0
MPI Rank 2: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.32883806 * 640; EvalErrorPrediction = 0.90312500 * 640; time = 0.2916s; samplesPerSecond = 2195.1
MPI Rank 2: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.08378633 * 640; EvalErrorPrediction = 0.87500000 * 640; time = 0.2902s; samplesPerSecond = 2205.1
MPI Rank 2: 07/12/2016 07:45:01:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.86437688 * 640; EvalErrorPrediction = 0.85781250 * 640; time = 0.2403s; samplesPerSecond = 2662.8
MPI Rank 2: 07/12/2016 07:45:02:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.63%]: CrossEntropyWithSoftmax = 3.78275244 * 640; EvalErrorPrediction = 0.84062500 * 640; time = 0.2396s; samplesPerSecond = 2671.6
MPI Rank 2: 07/12/2016 07:45:02:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.78346887 * 640; EvalErrorPrediction = 0.84062500 * 640; time = 0.3071s; samplesPerSecond = 2084.1
MPI Rank 2: 07/12/2016 07:45:02:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.57945558 * 640; EvalErrorPrediction = 0.84375000 * 640; time = 0.4021s; samplesPerSecond = 1591.5
MPI Rank 2: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.41928690 * 640; EvalErrorPrediction = 0.80625000 * 640; time = 0.3335s; samplesPerSecond = 1919.1
MPI Rank 2: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.13%]: CrossEntropyWithSoftmax = 3.35537765 * 640; EvalErrorPrediction = 0.78437500 * 640; time = 0.3317s; samplesPerSecond = 1929.4
MPI Rank 2: 07/12/2016 07:45:03:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.34035314 * 640; EvalErrorPrediction = 0.79687500 * 640; time = 0.4028s; samplesPerSecond = 1588.8
MPI Rank 2: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.14170387 * 640; EvalErrorPrediction = 0.73437500 * 640; time = 0.3574s; samplesPerSecond = 1790.5
MPI Rank 2: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.13777172 * 640; EvalErrorPrediction = 0.76562500 * 640; time = 0.3797s; samplesPerSecond = 1685.6
MPI Rank 2: 07/12/2016 07:45:04:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.63%]: CrossEntropyWithSoftmax = 3.23064165 * 640; EvalErrorPrediction = 0.80000000 * 640; time = 0.2453s; samplesPerSecond = 2608.8
MPI Rank 2: 07/12/2016 07:45:05:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.05606676 * 640; EvalErrorPrediction = 0.75781250 * 640; time = 0.2361s; samplesPerSecond = 2710.5
MPI Rank 2: 07/12/2016 07:45:05:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.02136529 * 640; EvalErrorPrediction = 0.71718750 * 640; time = 0.2837s; samplesPerSecond = 2256.3
MPI Rank 2: 07/12/2016 07:45:05:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 2.95667243 * 640; EvalErrorPrediction = 0.69687500 * 640; time = 0.4047s; samplesPerSecond = 1581.6
MPI Rank 2: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.13%]: CrossEntropyWithSoftmax = 2.93193504 * 640; EvalErrorPrediction = 0.72812500 * 640; time = 0.3507s; samplesPerSecond = 1825.1
MPI Rank 2: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.72416562 * 640; EvalErrorPrediction = 0.69531250 * 640; time = 0.3046s; samplesPerSecond = 2100.9
MPI Rank 2: 07/12/2016 07:45:06:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.83200380 * 640; EvalErrorPrediction = 0.70156250 * 640; time = 0.3867s; samplesPerSecond = 1655.1
MPI Rank 2: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.70679406 * 640; EvalErrorPrediction = 0.65625000 * 640; time = 0.2472s; samplesPerSecond = 2588.7
MPI Rank 2: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.63%]: CrossEntropyWithSoftmax = 2.77854003 * 640; EvalErrorPrediction = 0.71562500 * 640; time = 0.2590s; samplesPerSecond = 2471.0
MPI Rank 2: 07/12/2016 07:45:07:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.66396376 * 640; EvalErrorPrediction = 0.70000000 * 640; time = 0.3938s; samplesPerSecond = 1625.4
MPI Rank 2: 07/12/2016 07:45:08:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.57950992 * 640; EvalErrorPrediction = 0.65468750 * 640; time = 0.2440s; samplesPerSecond = 2622.8
MPI Rank 2: 07/12/2016 07:45:08:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.36937895 * 640; EvalErrorPrediction = 0.62812500 * 640; time = 0.2013s; samplesPerSecond = 3180.0
MPI Rank 2: 07/12/2016 07:45:08:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.13%]: CrossEntropyWithSoftmax = 2.40040988 * 640; EvalErrorPrediction = 0.62656250 * 640; time = 0.2021s; samplesPerSecond = 3166.8
MPI Rank 2: 07/12/2016 07:45:08:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.40305075 * 640; EvalErrorPrediction = 0.62343750 * 640; time = 0.2022s; samplesPerSecond = 3165.8
MPI Rank 2: 07/12/2016 07:45:08:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.55326989 * 640; EvalErrorPrediction = 0.67187500 * 640; time = 0.2020s; samplesPerSecond = 3168.3
MPI Rank 2: 07/12/2016 07:45:09:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.34851895 * 640; EvalErrorPrediction = 0.62812500 * 640; time = 0.2022s; samplesPerSecond = 3165.3
MPI Rank 2: 07/12/2016 07:45:09:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.63%]: CrossEntropyWithSoftmax = 2.22384722 * 640; EvalErrorPrediction = 0.62500000 * 640; time = 0.1938s; samplesPerSecond = 3302.2
MPI Rank 2: 07/12/2016 07:45:09:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.26093641 * 640; EvalErrorPrediction = 0.60000000 * 640; time = 0.1950s; samplesPerSecond = 3281.4
MPI Rank 2: 07/12/2016 07:45:09:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.29654256 * 640; EvalErrorPrediction = 0.60937500 * 640; time = 0.2178s; samplesPerSecond = 2938.2
MPI Rank 2: 07/12/2016 07:45:09:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.27450077 * 640; EvalErrorPrediction = 0.59843750 * 640; time = 0.1465s; samplesPerSecond = 4369.0
MPI Rank 2: 07/12/2016 07:45:09: Finished Epoch[ 1 of 4]: [Training] CrossEntropyWithSoftmax = 3.03339198 * 20480; EvalErrorPrediction = 0.73159180 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=9.01713s
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:09: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:09: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Actual gradient aggregation time: 0.015314
MPI Rank 2: Async gradient aggregation wait time: 0.048954
MPI Rank 2: Actual gradient aggregation time: 0.048331
MPI Rank 2: 07/12/2016 07:45:10:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.16269672 * 2304; EvalErrorPrediction = 0.58810764 * 2304; time = 0.6032s; samplesPerSecond = 3819.6
MPI Rank 2: Async gradient aggregation wait time: 0.077956
MPI Rank 2: Actual gradient aggregation time: 0.129263
MPI Rank 2: Async gradient aggregation wait time: 0.01117
MPI Rank 2: Actual gradient aggregation time: 0.036102
MPI Rank 2: 07/12/2016 07:45:11:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.10873971 * 2560; EvalErrorPrediction = 0.57890625 * 2560; time = 0.6577s; samplesPerSecond = 3892.5
MPI Rank 2: Async gradient aggregation wait time: 0.018722
MPI Rank 2: Actual gradient aggregation time: 0.042317
MPI Rank 2: Async gradient aggregation wait time: 2e-006
MPI Rank 2: Actual gradient aggregation time: 0.020251
MPI Rank 2: 07/12/2016 07:45:12:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.14483241 * 2560; EvalErrorPrediction = 0.57109375 * 2560; time = 0.8637s; samplesPerSecond = 2963.9
MPI Rank 2: Async gradient aggregation wait time: 2e-006
MPI Rank 2: Actual gradient aggregation time: 0.006275
MPI Rank 2: Async gradient aggregation wait time: 0.079988
MPI Rank 2: Actual gradient aggregation time: 0.026099
MPI Rank 2: 07/12/2016 07:45:12:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 2.19328159 * 2560; EvalErrorPrediction = 0.58593750 * 2560; time = 0.6432s; samplesPerSecond = 3980.1
MPI Rank 2: Async gradient aggregation wait time: 0.010814
MPI Rank 2: Actual gradient aggregation time: 0.053918
MPI Rank 2: Async gradient aggregation wait time: 0.053987
MPI Rank 2: Actual gradient aggregation time: 0.047783
MPI Rank 2: 07/12/2016 07:45:13:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 2.18948678 * 2560; EvalErrorPrediction = 0.58203125 * 2560; time = 0.5595s; samplesPerSecond = 4575.5
MPI Rank 2: Async gradient aggregation wait time: 2e-006
MPI Rank 2: Actual gradient aggregation time: 0.013399
MPI Rank 2: Async gradient aggregation wait time: 2e-006
MPI Rank 2: Actual gradient aggregation time: 0.003878
MPI Rank 2: 07/12/2016 07:45:13:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 2.12942428 * 2560; EvalErrorPrediction = 0.57656250 * 2560; time = 0.6001s; samplesPerSecond = 4266.2
MPI Rank 2: Async gradient aggregation wait time: 2e-006
MPI Rank 2: Actual gradient aggregation time: 0.027105
MPI Rank 2: Async gradient aggregation wait time: 2e-006
MPI Rank 2: Actual gradient aggregation time: 0.322093
MPI Rank 2: 07/12/2016 07:45:14:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 2.24928197 * 2560; EvalErrorPrediction = 0.63007813 * 2560; time = 0.7878s; samplesPerSecond = 3249.5
MPI Rank 2: Async gradient aggregation wait time: 2e-006
MPI Rank 2: Actual gradient aggregation time: 0.013165
MPI Rank 2: Async gradient aggregation wait time: 0.00102
MPI Rank 2: Actual gradient aggregation time: 0.027787
MPI Rank 2: 07/12/2016 07:45:15:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 2.15627372 * 2560; EvalErrorPrediction = 0.57187500 * 2560; time = 0.8637s; samplesPerSecond = 2964.0
MPI Rank 2: Async gradient aggregation wait time: 0.00036
MPI Rank 2: Actual gradient aggregation time: 0.014132
MPI Rank 2: 07/12/2016 07:45:15: Finished Epoch[ 2 of 4]: [Training] CrossEntropyWithSoftmax = 2.16628446 * 20480; EvalErrorPrediction = 0.58520508 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=5.60933s
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:15: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:15: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 2e-006
MPI Rank 2: Actual gradient aggregation time: 0.04273
MPI Rank 2: Async gradient aggregation wait time: 0.023277
MPI Rank 2: Actual gradient aggregation time: 0.08931
MPI Rank 2: 07/12/2016 07:45:16:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.19054228 * 9216; EvalErrorPrediction = 0.57042101 * 9216; time = 1.2191s; samplesPerSecond = 7559.8
MPI Rank 2: Async gradient aggregation wait time: 0.002211
MPI Rank 2: Actual gradient aggregation time: 0.10802
MPI Rank 2: Async gradient aggregation wait time: 0.001074
MPI Rank 2: Actual gradient aggregation time: 0.152809
MPI Rank 2: 07/12/2016 07:45:18:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.15940173 * 10240; EvalErrorPrediction = 0.56484375 * 10240; time = 1.1864s; samplesPerSecond = 8631.1
MPI Rank 2: 07/12/2016 07:45:18: Finished Epoch[ 3 of 4]: [Training] CrossEntropyWithSoftmax = 2.16937752 * 20480; EvalErrorPrediction = 0.56713867 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-005; epochTime=2.46676s
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:18: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:18: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 0.108709
MPI Rank 2: Actual gradient aggregation time: 0.063054
MPI Rank 2: Async gradient aggregation wait time: 2e-006
MPI Rank 2: Actual gradient aggregation time: 0.200914
MPI Rank 2: 07/12/2016 07:45:20:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.09278716 * 9216; EvalErrorPrediction = 0.56532118 * 9216; time = 1.5740s; samplesPerSecond = 5855.3
MPI Rank 2: Async gradient aggregation wait time: 4e-006
MPI Rank 2: Actual gradient aggregation time: 0.004156
MPI Rank 2: Async gradient aggregation wait time: 2e-006
MPI Rank 2: Actual gradient aggregation time: 0.023985
MPI Rank 2: 07/12/2016 07:45:21:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.04723465 * 10240; EvalErrorPrediction = 0.55087891 * 10240; time = 1.3423s; samplesPerSecond = 7629.0
MPI Rank 2: Async gradient aggregation wait time: 0.001675
MPI Rank 2: 07/12/2016 07:45:21: Finished Epoch[ 4 of 4]: [Training] CrossEntropyWithSoftmax = 2.06384290 * 20480; EvalErrorPrediction = 0.55722656 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 9.7656251e-005; epochTime=2.96807s
MPI Rank 2: 07/12/2016 07:45:21: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:21: Action "train" complete.
MPI Rank 2: 
MPI Rank 2: 07/12/2016 07:45:21: __COMPLETED__
MPI Rank 2: ~MPIWrapper