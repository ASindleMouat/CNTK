CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 268381192 kB
-------------------------------------------------------------------
=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 2 C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu DeviceId=-1 timestamping=true numCPUThreads=12 stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Jul 12 2016 06:56:04
		Last modified date: Fri Jul  8 10:29:45 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
-------------------------------------------------------------------
Build info: 

		Built time: Jul 12 2016 06:56:04
		Last modified date: Fri Jul  8 10:29:45 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
MPI Rank 0: 07/12/2016 07:59:55: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr_speechTrain.logrank0
MPI Rank 0: 07/12/2016 07:59:55: -------------------------------------------------------------------
MPI Rank 0: 07/12/2016 07:59:55: Build info: 
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:55: 		Built time: Jul 12 2016 06:56:04
MPI Rank 0: 07/12/2016 07:59:55: 		Last modified date: Fri Jul  8 10:29:45 2016
MPI Rank 0: 07/12/2016 07:59:55: 		Build type: Release
MPI Rank 0: 07/12/2016 07:59:55: 		Build target: GPU
MPI Rank 0: 07/12/2016 07:59:55: 		With 1bit-SGD: no
MPI Rank 0: 07/12/2016 07:59:55: 		Math lib: mkl
MPI Rank 0: 07/12/2016 07:59:55: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 0: 07/12/2016 07:59:55: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 0: 07/12/2016 07:59:55: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 0: 07/12/2016 07:59:55: 		Build Branch: HEAD
MPI Rank 0: 07/12/2016 07:59:55: 		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
MPI Rank 0: 07/12/2016 07:59:55: 		Built by svcphil on liana-08-w
MPI Rank 0: 07/12/2016 07:59:55: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 0: 07/12/2016 07:59:55: -------------------------------------------------------------------
MPI Rank 0: 07/12/2016 07:59:58: -------------------------------------------------------------------
MPI Rank 0: 07/12/2016 07:59:58: GPU info:
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:58: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 0: 07/12/2016 07:59:58: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 0: 07/12/2016 07:59:58: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 0: 07/12/2016 07:59:58: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 0: 07/12/2016 07:59:58: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:58: Running on DPHAIM-24 at 2016/07/12 07:59:58
MPI Rank 0: 07/12/2016 07:59:58: Command line: 
MPI Rank 0: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:58: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/12/2016 07:59:58: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:58: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:58: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/12/2016 07:59:58: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:58: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:58: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 07/12/2016 07:59:58: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 07/12/2016 07:59:58: Commands: speechTrain
MPI Rank 0: 07/12/2016 07:59:58: Precision = "float"
MPI Rank 0: 07/12/2016 07:59:58: Using 12 CPU threads.
MPI Rank 0: 07/12/2016 07:59:58: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 0: 07/12/2016 07:59:58: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 07/12/2016 07:59:58: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:58: ##############################################################################
MPI Rank 0: 07/12/2016 07:59:58: #                                                                            #
MPI Rank 0: 07/12/2016 07:59:58: # Action "train"                                                             #
MPI Rank 0: 07/12/2016 07:59:58: #                                                                            #
MPI Rank 0: 07/12/2016 07:59:58: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:58: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:59: Creating virgin network.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:59: Created model with 36 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:59: Training criterion node(s):
MPI Rank 0: 07/12/2016 07:59:59: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:59: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:59: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: 0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 00000076B1074190: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 00000076B113DD10: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 00000076B113DDB0: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 00000076B113DEF0: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 00000076B113DF90: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 00000076B113E030: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 00000076B113E0D0: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 00000076B113E2B0: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 00000076B113E350: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 00000076B113E3F0: {[featNorm Value[363 x *]] }
MPI Rank 0: 00000076B113E5D0: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 00000076B113E670: {[logPrior Value[132]] }
MPI Rank 0: 00000076B113E710: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 00000076B113E7B0: {[features Value[363 x *]] }
MPI Rank 0: 00000076B113E850: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 00000076B113E8F0: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 00000076B113E990: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 00000076B113EA30: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 00000076B113EAD0: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 00000076B113EF30: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 00000076B113EFD0: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 00000076B113F1B0: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 00000076B113F250: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 00000076B113F2F0: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 00000076B113F430: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 00000076B113F4D0: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 00000076B113F570: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 00000076B113F6B0: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 00000076B113F7F0: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 00000076B113F9D0: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 00000076B11400B0: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 00000076B11401F0: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 00000076B1140330: {[ce Gradient[1]] }
MPI Rank 0: 00000076B11403D0: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 00000076B1140470: {[logPrior._ Value[132]] }
MPI Rank 0: 00000076B1140B50: {[err Value[1]] }
MPI Rank 0: 00000076B1140FB0: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 00000076B11410F0: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 00000076B11414B0: {[ce Value[1]] }
MPI Rank 0: 00000076B11415F0: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 00000076B123BE30: {[link Value[1 x 1]] }
MPI Rank 0: 00000076C60E9C40: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 00000076C60EAC80: {[labels Value[132 x *]] }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:59: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 07:59:59: 	featNorm.meanVector = Mean()
MPI Rank 0: 07/12/2016 07:59:59: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 07/12/2016 07:59:59: 	logPrior._ = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:00: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Setting dropout rate to 0.1.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:01: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:01: Starting minibatch loop.
MPI Rank 0: 07/12/2016 08:00:02:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 7.73349991 * 2560; err = 0.94218750 * 2560; time = 0.4270s; samplesPerSecond = 5995.4
MPI Rank 0: 07/12/2016 08:00:02:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 5.42069321 * 2560; err = 0.89843750 * 2560; time = 0.3753s; samplesPerSecond = 6820.8
MPI Rank 0: 07/12/2016 08:00:02:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 4.23163147 * 2560; err = 0.90507812 * 2560; time = 0.3770s; samplesPerSecond = 6790.4
MPI Rank 0: 07/12/2016 08:00:03:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.13554077 * 2560; err = 0.90195313 * 2560; time = 0.3743s; samplesPerSecond = 6839.0
MPI Rank 0: 07/12/2016 08:00:03:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.00191193 * 2560; err = 0.88476563 * 2560; time = 0.3733s; samplesPerSecond = 6857.2
MPI Rank 0: 07/12/2016 08:00:03:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.98231659 * 2560; err = 0.88750000 * 2560; time = 0.3647s; samplesPerSecond = 7019.5
MPI Rank 0: 07/12/2016 08:00:04:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 4.00305481 * 2560; err = 0.87773437 * 2560; time = 0.3851s; samplesPerSecond = 6646.8
MPI Rank 0: 07/12/2016 08:00:04:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.92514038 * 2560; err = 0.87734375 * 2560; time = 0.3562s; samplesPerSecond = 7187.4
MPI Rank 0: 07/12/2016 08:00:04: Finished Epoch[ 1 of 5]: [Training] ce = 4.67922363 * 20480; err = 0.89687500 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=3.04007s
MPI Rank 0: 07/12/2016 08:00:04: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:04: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:04: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/12/2016 08:00:05:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.92310545 * 2560; err = 0.88164062 * 2560; time = 0.3004s; samplesPerSecond = 8522.9
MPI Rank 0: 07/12/2016 08:00:05:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.75522906 * 2560; err = 0.83984375 * 2560; time = 0.2973s; samplesPerSecond = 8610.9
MPI Rank 0: 07/12/2016 08:00:05:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.68318569 * 2560; err = 0.82460937 * 2560; time = 0.2922s; samplesPerSecond = 8761.8
MPI Rank 0: 07/12/2016 08:00:05:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.56950505 * 2560; err = 0.81171875 * 2560; time = 0.2924s; samplesPerSecond = 8753.9
MPI Rank 0: 07/12/2016 08:00:06:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.50941917 * 2560; err = 0.82851562 * 2560; time = 0.2869s; samplesPerSecond = 8923.8
MPI Rank 0: 07/12/2016 08:00:06:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.41148406 * 2560; err = 0.80117187 * 2560; time = 0.2944s; samplesPerSecond = 8695.7
MPI Rank 0: 07/12/2016 08:00:06:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.31950791 * 2560; err = 0.78750000 * 2560; time = 0.2904s; samplesPerSecond = 8815.8
MPI Rank 0: 07/12/2016 08:00:07:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.26946708 * 2560; err = 0.77500000 * 2560; time = 0.2903s; samplesPerSecond = 8819.7
MPI Rank 0: 07/12/2016 08:00:07: Finished Epoch[ 2 of 5]: [Training] ce = 3.55511293 * 20480; err = 0.81875000 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=2.35504s
MPI Rank 0: 07/12/2016 08:00:07: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.2'
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:07: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:07: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/12/2016 08:00:07:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.28640406 * 2560; err = 0.78085938 * 2560; time = 0.2839s; samplesPerSecond = 9017.3
MPI Rank 0: 07/12/2016 08:00:07:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.18331656 * 2560; err = 0.77148438 * 2560; time = 0.2867s; samplesPerSecond = 8929.9
MPI Rank 0: 07/12/2016 08:00:08:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.07356572 * 2560; err = 0.73359375 * 2560; time = 0.2972s; samplesPerSecond = 8612.9
MPI Rank 0: 07/12/2016 08:00:08:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.11185321 * 2560; err = 0.74414063 * 2560; time = 0.2941s; samplesPerSecond = 8705.4
MPI Rank 0: 07/12/2016 08:00:08:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.04113851 * 2560; err = 0.73007813 * 2560; time = 0.2843s; samplesPerSecond = 9004.1
MPI Rank 0: 07/12/2016 08:00:09:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.99713284 * 2560; err = 0.73359375 * 2560; time = 0.2892s; samplesPerSecond = 8850.6
MPI Rank 0: 07/12/2016 08:00:09:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.89559449 * 2560; err = 0.71445313 * 2560; time = 0.2951s; samplesPerSecond = 8676.0
MPI Rank 0: 07/12/2016 08:00:09:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.88146812 * 2560; err = 0.71250000 * 2560; time = 0.2907s; samplesPerSecond = 8805.9
MPI Rank 0: 07/12/2016 08:00:09: Finished Epoch[ 3 of 5]: [Training] ce = 3.05880919 * 20480; err = 0.74008789 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=2.33168s
MPI Rank 0: 07/12/2016 08:00:09: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:09: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:09: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/12/2016 08:00:10:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.84130809 * 2560; err = 0.70468750 * 2560; time = 0.2918s; samplesPerSecond = 8774.3
MPI Rank 0: 07/12/2016 08:00:10:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.72913238 * 2560; err = 0.68046875 * 2560; time = 0.2877s; samplesPerSecond = 8897.0
MPI Rank 0: 07/12/2016 08:00:10:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.70578750 * 2560; err = 0.67773438 * 2560; time = 0.2863s; samplesPerSecond = 8941.3
MPI Rank 0: 07/12/2016 08:00:10:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.68580059 * 2560; err = 0.67617187 * 2560; time = 0.2885s; samplesPerSecond = 8872.4
MPI Rank 0: 07/12/2016 08:00:11:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.60662335 * 2560; err = 0.65273437 * 2560; time = 0.2821s; samplesPerSecond = 9073.4
MPI Rank 0: 07/12/2016 08:00:11:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.55723847 * 2560; err = 0.65781250 * 2560; time = 0.2898s; samplesPerSecond = 8832.5
MPI Rank 0: 07/12/2016 08:00:11:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.53293422 * 2560; err = 0.65585938 * 2560; time = 0.2803s; samplesPerSecond = 9132.0
MPI Rank 0: 07/12/2016 08:00:12:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.41680033 * 2560; err = 0.63125000 * 2560; time = 0.2915s; samplesPerSecond = 8781.3
MPI Rank 0: 07/12/2016 08:00:12: Finished Epoch[ 4 of 5]: [Training] ce = 2.63445312 * 20480; err = 0.66708984 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=2.309s
MPI Rank 0: 07/12/2016 08:00:12: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:12: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:12: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/12/2016 08:00:12:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.44035064 * 2560; err = 0.63710937 * 2560; time = 0.2402s; samplesPerSecond = 10659.6
MPI Rank 0: 07/12/2016 08:00:12:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.35605514 * 2560; err = 0.60429687 * 2560; time = 0.2420s; samplesPerSecond = 10577.1
MPI Rank 0: 07/12/2016 08:00:12:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.34595256 * 2560; err = 0.61523438 * 2560; time = 0.2468s; samplesPerSecond = 10373.2
MPI Rank 0: 07/12/2016 08:00:13:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.25260699 * 2560; err = 0.59218750 * 2560; time = 0.2541s; samplesPerSecond = 10074.5
MPI Rank 0: 07/12/2016 08:00:13:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.25035535 * 2560; err = 0.59570313 * 2560; time = 0.2451s; samplesPerSecond = 10443.6
MPI Rank 0: 07/12/2016 08:00:13:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.17557060 * 2560; err = 0.58984375 * 2560; time = 0.2364s; samplesPerSecond = 10829.3
MPI Rank 0: 07/12/2016 08:00:13:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.13945636 * 2560; err = 0.56992188 * 2560; time = 0.2422s; samplesPerSecond = 10571.6
MPI Rank 0: 07/12/2016 08:00:14:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.12016786 * 2560; err = 0.57148438 * 2560; time = 0.2453s; samplesPerSecond = 10435.5
MPI Rank 0: 07/12/2016 08:00:14: Finished Epoch[ 5 of 5]: [Training] ce = 2.26006444 * 20480; err = 0.59697266 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=1.96259s
MPI Rank 0: 07/12/2016 08:00:14: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 07/12/2016 08:00:14: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:14: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:14: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 07/12/2016 07:59:55: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr_speechTrain.logrank1
MPI Rank 1: 07/12/2016 07:59:55: -------------------------------------------------------------------
MPI Rank 1: 07/12/2016 07:59:55: Build info: 
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:59:55: 		Built time: Jul 12 2016 06:56:04
MPI Rank 1: 07/12/2016 07:59:55: 		Last modified date: Fri Jul  8 10:29:45 2016
MPI Rank 1: 07/12/2016 07:59:55: 		Build type: Release
MPI Rank 1: 07/12/2016 07:59:55: 		Build target: GPU
MPI Rank 1: 07/12/2016 07:59:55: 		With 1bit-SGD: no
MPI Rank 1: 07/12/2016 07:59:55: 		Math lib: mkl
MPI Rank 1: 07/12/2016 07:59:55: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 1: 07/12/2016 07:59:55: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 1: 07/12/2016 07:59:55: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 1: 07/12/2016 07:59:55: 		Build Branch: HEAD
MPI Rank 1: 07/12/2016 07:59:55: 		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
MPI Rank 1: 07/12/2016 07:59:55: 		Built by svcphil on liana-08-w
MPI Rank 1: 07/12/2016 07:59:55: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 1: 07/12/2016 07:59:55: -------------------------------------------------------------------
MPI Rank 1: 07/12/2016 07:59:59: -------------------------------------------------------------------
MPI Rank 1: 07/12/2016 07:59:59: GPU info:
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:59:59: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 1: 07/12/2016 07:59:59: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 1: 07/12/2016 07:59:59: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 1: 07/12/2016 07:59:59: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 1: 07/12/2016 07:59:59: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:59:59: Running on DPHAIM-24 at 2016/07/12 07:59:59
MPI Rank 1: 07/12/2016 07:59:59: Command line: 
MPI Rank 1: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:59:59: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/12/2016 07:59:59: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:59:59: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:59:59: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/12/2016 07:59:59: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:59:59: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:59:59: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 07/12/2016 07:59:59: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 07/12/2016 07:59:59: Commands: speechTrain
MPI Rank 1: 07/12/2016 07:59:59: Precision = "float"
MPI Rank 1: 07/12/2016 07:59:59: Using 12 CPU threads.
MPI Rank 1: 07/12/2016 07:59:59: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 1: 07/12/2016 07:59:59: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 07/12/2016 07:59:59: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:59:59: ##############################################################################
MPI Rank 1: 07/12/2016 07:59:59: #                                                                            #
MPI Rank 1: 07/12/2016 07:59:59: # Action "train"                                                             #
MPI Rank 1: 07/12/2016 07:59:59: #                                                                            #
MPI Rank 1: 07/12/2016 07:59:59: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 07/12/2016 07:59:59: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:00: Creating virgin network.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:00: Created model with 36 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:00: Training criterion node(s):
MPI Rank 1: 07/12/2016 08:00:00: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:00: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:00: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: 0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0000000956070670: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0000000956071890: {[labels Value[132 x *]] }
MPI Rank 1: 000000096ADA8070: {[link Value[1 x 1]] }
MPI Rank 1: 000000096ADA97C0: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 000000096B369910: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 000000096B369AF0: {[logPrior._ Value[132]] }
MPI Rank 1: 000000096B369B90: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 000000096B369C30: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 000000096B369CD0: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 000000096B369E10: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 000000096B369EB0: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 000000096B36A1D0: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 000000096B36A270: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 000000096B36A590: {[features Value[363 x *]] }
MPI Rank 1: 000000096B36A6D0: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 000000096B36A810: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 000000096B36A8B0: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 000000096B36AA90: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 000000096B36ABD0: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 000000096B36AC70: {[featNorm Value[363 x *]] }
MPI Rank 1: 000000096B36ADB0: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 000000096B36AF90: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 000000096B36B030: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 000000096B36B0D0: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 000000096B36B210: {[ce Gradient[1]] }
MPI Rank 1: 000000096B36B2B0: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 000000096B36B350: {[logPrior Value[132]] }
MPI Rank 1: 000000096B36B3F0: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 000000096B36B490: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 000000096B36B530: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 000000096B36B5D0: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 000000096B36B710: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 000000096B36B7B0: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 000000096B36B8F0: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 000000096B36BA30: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 000000096B36BAD0: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 000000096B36BC10: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 000000096B36BF30: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 000000096B36C070: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 000000096B36C390: {[err Value[1]] }
MPI Rank 1: 000000096B36C4D0: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 000000096B36C570: {[ce Value[1]] }
MPI Rank 1: 000000096B36C890: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:00: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:00: 	featNorm.meanVector = Mean()
MPI Rank 1: 07/12/2016 08:00:00: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 07/12/2016 08:00:00: 	logPrior._ = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:01: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Setting dropout rate to 0.1.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:01: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:01: Starting minibatch loop.
MPI Rank 1: 07/12/2016 08:00:01:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 7.73349991 * 2560; err = 0.94218750 * 2560; time = 0.4040s; samplesPerSecond = 6336.4
MPI Rank 1: 07/12/2016 08:00:02:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 5.42069321 * 2560; err = 0.89843750 * 2560; time = 0.3455s; samplesPerSecond = 7408.9
MPI Rank 1: 07/12/2016 08:00:02:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 4.23163147 * 2560; err = 0.90507812 * 2560; time = 0.3540s; samplesPerSecond = 7232.3
MPI Rank 1: 07/12/2016 08:00:03:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.13554077 * 2560; err = 0.90195313 * 2560; time = 0.3431s; samplesPerSecond = 7461.9
MPI Rank 1: 07/12/2016 08:00:03:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.00191193 * 2560; err = 0.88476563 * 2560; time = 0.3765s; samplesPerSecond = 6798.9
MPI Rank 1: 07/12/2016 08:00:03:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.98231659 * 2560; err = 0.88750000 * 2560; time = 0.3530s; samplesPerSecond = 7252.6
MPI Rank 1: 07/12/2016 08:00:04:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 4.00305481 * 2560; err = 0.87773437 * 2560; time = 0.3554s; samplesPerSecond = 7202.3
MPI Rank 1: 07/12/2016 08:00:04:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.92514038 * 2560; err = 0.87734375 * 2560; time = 0.3490s; samplesPerSecond = 7336.1
MPI Rank 1: 07/12/2016 08:00:04: Finished Epoch[ 1 of 5]: [Training] ce = 4.67922363 * 20480; err = 0.89687500 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=2.88799s
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:04: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:04: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/12/2016 08:00:05:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.92310545 * 2560; err = 0.88164062 * 2560; time = 0.3009s; samplesPerSecond = 8506.4
MPI Rank 1: 07/12/2016 08:00:05:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.75522906 * 2560; err = 0.83984375 * 2560; time = 0.2973s; samplesPerSecond = 8612.2
MPI Rank 1: 07/12/2016 08:00:05:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.68318569 * 2560; err = 0.82460937 * 2560; time = 0.2923s; samplesPerSecond = 8759.4
MPI Rank 1: 07/12/2016 08:00:05:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.56950505 * 2560; err = 0.81171875 * 2560; time = 0.2924s; samplesPerSecond = 8754.6
MPI Rank 1: 07/12/2016 08:00:06:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.50941917 * 2560; err = 0.82851562 * 2560; time = 0.2868s; samplesPerSecond = 8924.8
MPI Rank 1: 07/12/2016 08:00:06:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.41148406 * 2560; err = 0.80117187 * 2560; time = 0.2944s; samplesPerSecond = 8694.6
MPI Rank 1: 07/12/2016 08:00:06:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.31950791 * 2560; err = 0.78750000 * 2560; time = 0.2904s; samplesPerSecond = 8815.1
MPI Rank 1: 07/12/2016 08:00:07:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.26946708 * 2560; err = 0.77500000 * 2560; time = 0.2902s; samplesPerSecond = 8821.1
MPI Rank 1: 07/12/2016 08:00:07: Finished Epoch[ 2 of 5]: [Training] ce = 3.55511293 * 20480; err = 0.81875000 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=2.35503s
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:07: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:07: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/12/2016 08:00:07:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.28640406 * 2560; err = 0.78085938 * 2560; time = 0.2846s; samplesPerSecond = 8995.0
MPI Rank 1: 07/12/2016 08:00:07:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.18331656 * 2560; err = 0.77148438 * 2560; time = 0.2866s; samplesPerSecond = 8931.6
MPI Rank 1: 07/12/2016 08:00:08:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.07356572 * 2560; err = 0.73359375 * 2560; time = 0.2973s; samplesPerSecond = 8610.5
MPI Rank 1: 07/12/2016 08:00:08:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.11185321 * 2560; err = 0.74414063 * 2560; time = 0.2940s; samplesPerSecond = 8707.2
MPI Rank 1: 07/12/2016 08:00:08:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.04113851 * 2560; err = 0.73007813 * 2560; time = 0.2843s; samplesPerSecond = 9003.5
MPI Rank 1: 07/12/2016 08:00:09:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.99713284 * 2560; err = 0.73359375 * 2560; time = 0.2892s; samplesPerSecond = 8852.1
MPI Rank 1: 07/12/2016 08:00:09:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.89559449 * 2560; err = 0.71445313 * 2560; time = 0.2952s; samplesPerSecond = 8673.4
MPI Rank 1: 07/12/2016 08:00:09:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.88146812 * 2560; err = 0.71250000 * 2560; time = 0.2906s; samplesPerSecond = 8808.1
MPI Rank 1: 07/12/2016 08:00:09: Finished Epoch[ 3 of 5]: [Training] ce = 3.05880919 * 20480; err = 0.74008789 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=2.33168s
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:09: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:09: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/12/2016 08:00:10:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.84130809 * 2560; err = 0.70468750 * 2560; time = 0.2925s; samplesPerSecond = 8753.2
MPI Rank 1: 07/12/2016 08:00:10:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.72913238 * 2560; err = 0.68046875 * 2560; time = 0.2878s; samplesPerSecond = 8895.4
MPI Rank 1: 07/12/2016 08:00:10:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.70578750 * 2560; err = 0.67773438 * 2560; time = 0.2863s; samplesPerSecond = 8943.0
MPI Rank 1: 07/12/2016 08:00:10:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.68580059 * 2560; err = 0.67617187 * 2560; time = 0.2883s; samplesPerSecond = 8878.4
MPI Rank 1: 07/12/2016 08:00:11:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.60662335 * 2560; err = 0.65273437 * 2560; time = 0.2822s; samplesPerSecond = 9070.2
MPI Rank 1: 07/12/2016 08:00:11:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.55723847 * 2560; err = 0.65781250 * 2560; time = 0.2899s; samplesPerSecond = 8830.8
MPI Rank 1: 07/12/2016 08:00:11:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.53293422 * 2560; err = 0.65585938 * 2560; time = 0.2803s; samplesPerSecond = 9134.1
MPI Rank 1: 07/12/2016 08:00:12:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.41680033 * 2560; err = 0.63125000 * 2560; time = 0.2916s; samplesPerSecond = 8778.6
MPI Rank 1: 07/12/2016 08:00:12: Finished Epoch[ 4 of 5]: [Training] ce = 2.63445312 * 20480; err = 0.66708984 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=2.309s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:12: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:12: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/12/2016 08:00:12:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.44035064 * 2560; err = 0.63710937 * 2560; time = 0.2408s; samplesPerSecond = 10630.5
MPI Rank 1: 07/12/2016 08:00:12:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.35605514 * 2560; err = 0.60429687 * 2560; time = 0.2421s; samplesPerSecond = 10575.1
MPI Rank 1: 07/12/2016 08:00:12:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.34595256 * 2560; err = 0.61523438 * 2560; time = 0.2468s; samplesPerSecond = 10372.4
MPI Rank 1: 07/12/2016 08:00:13:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.25260699 * 2560; err = 0.59218750 * 2560; time = 0.2541s; samplesPerSecond = 10073.5
MPI Rank 1: 07/12/2016 08:00:13:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.25035535 * 2560; err = 0.59570313 * 2560; time = 0.2451s; samplesPerSecond = 10443.0
MPI Rank 1: 07/12/2016 08:00:13:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.17557060 * 2560; err = 0.58984375 * 2560; time = 0.2363s; samplesPerSecond = 10832.9
MPI Rank 1: 07/12/2016 08:00:13:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.13945636 * 2560; err = 0.56992188 * 2560; time = 0.2422s; samplesPerSecond = 10568.5
MPI Rank 1: 07/12/2016 08:00:14:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.12016786 * 2560; err = 0.57148438 * 2560; time = 0.2454s; samplesPerSecond = 10432.3
MPI Rank 1: 07/12/2016 08:00:14: Finished Epoch[ 5 of 5]: [Training] ce = 2.26006444 * 20480; err = 0.59697266 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=1.96258s
MPI Rank 1: 07/12/2016 08:00:14: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:14: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:14: __COMPLETED__
MPI Rank 1: ~MPIWrapper
=== Deleting last 2 epochs and restart
==== Re-running from checkpoint
=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 2 C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu DeviceId=-1 timestamping=true numCPUThreads=12 stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Jul 12 2016 06:56:04
		Last modified date: Fri Jul  8 10:29:45 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
-------------------------------------------------------------------
Build info: 

		Built time: Jul 12 2016 06:56:04
		Last modified date: Fri Jul  8 10:29:45 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
MPI Rank 0: 07/12/2016 08:00:15: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr_speechTrain.logrank0
MPI Rank 0: 07/12/2016 08:00:15: -------------------------------------------------------------------
MPI Rank 0: 07/12/2016 08:00:15: Build info: 
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:15: 		Built time: Jul 12 2016 06:56:04
MPI Rank 0: 07/12/2016 08:00:15: 		Last modified date: Fri Jul  8 10:29:45 2016
MPI Rank 0: 07/12/2016 08:00:15: 		Build type: Release
MPI Rank 0: 07/12/2016 08:00:15: 		Build target: GPU
MPI Rank 0: 07/12/2016 08:00:15: 		With 1bit-SGD: no
MPI Rank 0: 07/12/2016 08:00:15: 		Math lib: mkl
MPI Rank 0: 07/12/2016 08:00:15: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 0: 07/12/2016 08:00:15: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 0: 07/12/2016 08:00:15: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 0: 07/12/2016 08:00:15: 		Build Branch: HEAD
MPI Rank 0: 07/12/2016 08:00:15: 		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
MPI Rank 0: 07/12/2016 08:00:15: 		Built by svcphil on liana-08-w
MPI Rank 0: 07/12/2016 08:00:15: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 0: 07/12/2016 08:00:15: -------------------------------------------------------------------
MPI Rank 0: 07/12/2016 08:00:18: -------------------------------------------------------------------
MPI Rank 0: 07/12/2016 08:00:18: GPU info:
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:18: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 0: 07/12/2016 08:00:18: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 0: 07/12/2016 08:00:18: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 0: 07/12/2016 08:00:18: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 0: 07/12/2016 08:00:18: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:18: Running on DPHAIM-24 at 2016/07/12 08:00:18
MPI Rank 0: 07/12/2016 08:00:18: Command line: 
MPI Rank 0: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:18: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/12/2016 08:00:18: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:18: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:18: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/12/2016 08:00:18: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:18: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:18: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 07/12/2016 08:00:18: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 07/12/2016 08:00:18: Commands: speechTrain
MPI Rank 0: 07/12/2016 08:00:18: Precision = "float"
MPI Rank 0: 07/12/2016 08:00:18: Using 12 CPU threads.
MPI Rank 0: 07/12/2016 08:00:18: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 0: 07/12/2016 08:00:18: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 07/12/2016 08:00:18: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:18: ##############################################################################
MPI Rank 0: 07/12/2016 08:00:18: #                                                                            #
MPI Rank 0: 07/12/2016 08:00:18: # Action "train"                                                             #
MPI Rank 0: 07/12/2016 08:00:18: #                                                                            #
MPI Rank 0: 07/12/2016 08:00:18: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:18: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:19: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:19: Loaded model with 36 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:19: Training criterion node(s):
MPI Rank 0: 07/12/2016 08:00:19: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:19: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:19: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: 0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 000000C2F8E3F140: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 000000C2F8E3F6E0: {[link Value[1 x 1]] }
MPI Rank 0: 000000C2F8E3F960: {[logPrior._ Value[132]] }
MPI Rank 0: 000000C2F8E3FA00: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 000000C2FB3B92E0: {[err Value[1]] }
MPI Rank 0: 000000C2FB3B9380: {[ce Value[1]] }
MPI Rank 0: 000000C2FB3B9600: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 000000C2FB3B96A0: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 000000C2FB4D4480: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 000000C2FB4D4660: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 000000C2FB4D4AC0: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 000000C2FB4D4C00: {[features Value[363 x *]] }
MPI Rank 0: 000000C2FB4D4FC0: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 000000C2FB4D5380: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 000000C2FB4D54C0: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 000000C2FB4D57E0: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 000000C2FB4D59C0: {[labels Value[132 x *]] }
MPI Rank 0: 000000C2FB4D5A60: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 000000C2FDDCA6D0: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 000000C2FDDCA8B0: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCAA90: {[featNorm Value[363 x *]] }
MPI Rank 0: 000000C2FDDCADB0: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCAE50: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCAEF0: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCAF90: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCB030: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCB0D0: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCB170: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCB210: {[ce Gradient[1]] }
MPI Rank 0: 000000C2FDDCB5D0: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 000000C2FDDCB710: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 000000C2FDDCB7B0: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 000000C2FDDCB850: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCB990: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 000000C2FDDCBB70: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCBCB0: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCBD50: {[logPrior Value[132]] }
MPI Rank 0: 000000C2FDDCBDF0: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 000000C2FDDCBE90: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 000000C2FDDCBFD0: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCC070: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 000000C2FDDCC250: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 000000C2FDDCC390: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:19: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:19: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:19: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/12/2016 08:00:20:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.84130809 * 2560; err = 0.70468750 * 2560; time = 0.3724s; samplesPerSecond = 6874.3
MPI Rank 0: 07/12/2016 08:00:20:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.72913238 * 2560; err = 0.68046875 * 2560; time = 0.2996s; samplesPerSecond = 8544.4
MPI Rank 0: 07/12/2016 08:00:20:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.70578750 * 2560; err = 0.67773438 * 2560; time = 0.2860s; samplesPerSecond = 8950.5
MPI Rank 0: 07/12/2016 08:00:20:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.68580059 * 2560; err = 0.67617187 * 2560; time = 0.2846s; samplesPerSecond = 8995.2
MPI Rank 0: 07/12/2016 08:00:21:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.60662335 * 2560; err = 0.65273437 * 2560; time = 0.2795s; samplesPerSecond = 9160.8
MPI Rank 0: 07/12/2016 08:00:21:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.55723847 * 2560; err = 0.65781250 * 2560; time = 0.2802s; samplesPerSecond = 9135.3
MPI Rank 0: 07/12/2016 08:00:21:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.53293422 * 2560; err = 0.65585938 * 2560; time = 0.2745s; samplesPerSecond = 9325.1
MPI Rank 0: 07/12/2016 08:00:22:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.41680033 * 2560; err = 0.63125000 * 2560; time = 0.2843s; samplesPerSecond = 9003.6
MPI Rank 0: 07/12/2016 08:00:22: Finished Epoch[ 4 of 5]: [Training] ce = 2.63445312 * 20480; err = 0.66708984 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=2.57945s
MPI Rank 0: 07/12/2016 08:00:22: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:22: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:22: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/12/2016 08:00:22:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.44035064 * 2560; err = 0.63710937 * 2560; time = 0.2242s; samplesPerSecond = 11418.0
MPI Rank 0: 07/12/2016 08:00:22:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.35605514 * 2560; err = 0.60429687 * 2560; time = 0.2315s; samplesPerSecond = 11060.1
MPI Rank 0: 07/12/2016 08:00:22:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.34595256 * 2560; err = 0.61523438 * 2560; time = 0.2392s; samplesPerSecond = 10700.4
MPI Rank 0: 07/12/2016 08:00:23:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.25260699 * 2560; err = 0.59218750 * 2560; time = 0.2235s; samplesPerSecond = 11455.7
MPI Rank 0: 07/12/2016 08:00:23:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.25035535 * 2560; err = 0.59570313 * 2560; time = 0.2347s; samplesPerSecond = 10907.9
MPI Rank 0: 07/12/2016 08:00:23:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.17557060 * 2560; err = 0.58984375 * 2560; time = 0.2257s; samplesPerSecond = 11340.3
MPI Rank 0: 07/12/2016 08:00:23:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.13945636 * 2560; err = 0.56992188 * 2560; time = 0.2303s; samplesPerSecond = 11113.9
MPI Rank 0: 07/12/2016 08:00:24:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.12016786 * 2560; err = 0.57148438 * 2560; time = 0.2386s; samplesPerSecond = 10731.4
MPI Rank 0: 07/12/2016 08:00:24: Finished Epoch[ 5 of 5]: [Training] ce = 2.26006444 * 20480; err = 0.59697266 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=1.85741s
MPI Rank 0: 07/12/2016 08:00:24: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 07/12/2016 08:00:24: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:24: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 07/12/2016 08:00:24: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 07/12/2016 08:00:15: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr_speechTrain.logrank1
MPI Rank 1: 07/12/2016 08:00:15: -------------------------------------------------------------------
MPI Rank 1: 07/12/2016 08:00:15: Build info: 
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:15: 		Built time: Jul 12 2016 06:56:04
MPI Rank 1: 07/12/2016 08:00:15: 		Last modified date: Fri Jul  8 10:29:45 2016
MPI Rank 1: 07/12/2016 08:00:15: 		Build type: Release
MPI Rank 1: 07/12/2016 08:00:15: 		Build target: GPU
MPI Rank 1: 07/12/2016 08:00:15: 		With 1bit-SGD: no
MPI Rank 1: 07/12/2016 08:00:15: 		Math lib: mkl
MPI Rank 1: 07/12/2016 08:00:15: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 1: 07/12/2016 08:00:15: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 1: 07/12/2016 08:00:15: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 1: 07/12/2016 08:00:15: 		Build Branch: HEAD
MPI Rank 1: 07/12/2016 08:00:15: 		Build SHA1: 906792b54561dcf6226f205d6edea86e04842f47
MPI Rank 1: 07/12/2016 08:00:15: 		Built by svcphil on liana-08-w
MPI Rank 1: 07/12/2016 08:00:15: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 1: 07/12/2016 08:00:15: -------------------------------------------------------------------
MPI Rank 1: 07/12/2016 08:00:18: -------------------------------------------------------------------
MPI Rank 1: 07/12/2016 08:00:18: GPU info:
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:18: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 1: 07/12/2016 08:00:18: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 1: 07/12/2016 08:00:18: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 1: 07/12/2016 08:00:18: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
MPI Rank 1: 07/12/2016 08:00:18: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:18: Running on DPHAIM-24 at 2016/07/12 08:00:18
MPI Rank 1: 07/12/2016 08:00:18: Command line: 
MPI Rank 1: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:18: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/12/2016 08:00:18: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:18: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:18: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/12/2016 08:00:18: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:18: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:18: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 07/12/2016 08:00:18: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 07/12/2016 08:00:18: Commands: speechTrain
MPI Rank 1: 07/12/2016 08:00:18: Precision = "float"
MPI Rank 1: 07/12/2016 08:00:18: Using 12 CPU threads.
MPI Rank 1: 07/12/2016 08:00:18: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 1: 07/12/2016 08:00:18: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 07/12/2016 08:00:18: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:18: ##############################################################################
MPI Rank 1: 07/12/2016 08:00:18: #                                                                            #
MPI Rank 1: 07/12/2016 08:00:18: # Action "train"                                                             #
MPI Rank 1: 07/12/2016 08:00:18: #                                                                            #
MPI Rank 1: 07/12/2016 08:00:18: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:18: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:19: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160712075937.954252\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:19: Loaded model with 36 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:19: Training criterion node(s):
MPI Rank 1: 07/12/2016 08:00:19: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:19: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:19: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: 0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0000000F94EFF460: {[link Value[1 x 1]] }
MPI Rank 1: 0000000F94EFF5A0: {[logPrior._ Value[132]] }
MPI Rank 1: 0000000F94EFF960: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 0000000F94EFFAA0: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0000000FB1CA4320: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0000000FB1CA4460: {[labels Value[132 x *]] }
MPI Rank 1: 0000000FB1CA4500: {[features Value[363 x *]] }
MPI Rank 1: 0000000FB1CA4C80: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 0000000FB1CA5400: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 0000000FB1CA5540: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0000000FB1CA5680: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 0000000FB1CA5EA0: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0000000FB1CA5FE0: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0000000FB1CA6080: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0000000FB1CBE610: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CBE6B0: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0000000FB1CBE7F0: {[featNorm Value[363 x *]] }
MPI Rank 1: 0000000FB1CBE890: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 0000000FB1CBE930: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0000000FB1CBE9D0: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CBEA70: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CBEB10: {[ce Gradient[1]] }
MPI Rank 1: 0000000FB1CBEC50: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CBEED0: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0000000FB1CBEF70: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CBF290: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CBF650: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 0000000FB1CBF790: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CBF830: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CBF8D0: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0000000FB1CBF970: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CBFA10: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CBFAB0: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 0000000FB1CBFB50: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0000000FB1CBFD30: {[logPrior Value[132]] }
MPI Rank 1: 0000000FB1CBFE70: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CC00F0: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CC0190: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0000000FB1CC02D0: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0000000FB1D7E7B0: {[err Value[1]] }
MPI Rank 1: 0000000FB1D7E990: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0000000FB1D7EAD0: {[ce Value[1]] }
MPI Rank 1: 0000000FB1D7EB70: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:19: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:19: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:19: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/12/2016 08:00:20:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.84130809 * 2560; err = 0.70468750 * 2560; time = 0.4481s; samplesPerSecond = 5712.5
MPI Rank 1: 07/12/2016 08:00:20:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.72913238 * 2560; err = 0.68046875 * 2560; time = 0.2996s; samplesPerSecond = 8544.0
MPI Rank 1: 07/12/2016 08:00:20:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.70578750 * 2560; err = 0.67773438 * 2560; time = 0.2860s; samplesPerSecond = 8950.0
MPI Rank 1: 07/12/2016 08:00:20:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.68580059 * 2560; err = 0.67617187 * 2560; time = 0.2846s; samplesPerSecond = 8994.1
MPI Rank 1: 07/12/2016 08:00:21:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.60662335 * 2560; err = 0.65273437 * 2560; time = 0.2795s; samplesPerSecond = 9159.2
MPI Rank 1: 07/12/2016 08:00:21:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.55723847 * 2560; err = 0.65781250 * 2560; time = 0.2801s; samplesPerSecond = 9139.7
MPI Rank 1: 07/12/2016 08:00:21:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.53293422 * 2560; err = 0.65585938 * 2560; time = 0.2746s; samplesPerSecond = 9322.3
MPI Rank 1: 07/12/2016 08:00:22:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.41680033 * 2560; err = 0.63125000 * 2560; time = 0.2843s; samplesPerSecond = 9006.0
MPI Rank 1: 07/12/2016 08:00:22: Finished Epoch[ 4 of 5]: [Training] ce = 2.63445312 * 20480; err = 0.66708984 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=2.57951s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:22: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:22: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/12/2016 08:00:22:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.44035064 * 2560; err = 0.63710937 * 2560; time = 0.2239s; samplesPerSecond = 11432.2
MPI Rank 1: 07/12/2016 08:00:22:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.35605514 * 2560; err = 0.60429687 * 2560; time = 0.2314s; samplesPerSecond = 11064.1
MPI Rank 1: 07/12/2016 08:00:22:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.34595256 * 2560; err = 0.61523438 * 2560; time = 0.2393s; samplesPerSecond = 10698.0
MPI Rank 1: 07/12/2016 08:00:23:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.25260699 * 2560; err = 0.59218750 * 2560; time = 0.2236s; samplesPerSecond = 11448.9
MPI Rank 1: 07/12/2016 08:00:23:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.25035535 * 2560; err = 0.59570313 * 2560; time = 0.2346s; samplesPerSecond = 10912.3
MPI Rank 1: 07/12/2016 08:00:23:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.17557060 * 2560; err = 0.58984375 * 2560; time = 0.2258s; samplesPerSecond = 11338.3
MPI Rank 1: 07/12/2016 08:00:23:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.13945636 * 2560; err = 0.56992188 * 2560; time = 0.2303s; samplesPerSecond = 11116.0
MPI Rank 1: 07/12/2016 08:00:24:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.12016786 * 2560; err = 0.57148438 * 2560; time = 0.2386s; samplesPerSecond = 10731.3
MPI Rank 1: 07/12/2016 08:00:24: Finished Epoch[ 5 of 5]: [Training] ce = 2.26006444 * 20480; err = 0.59697266 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=1.85741s
MPI Rank 1: 07/12/2016 08:00:24: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:24: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 07/12/2016 08:00:24: __COMPLETED__
MPI Rank 1: ~MPIWrapper